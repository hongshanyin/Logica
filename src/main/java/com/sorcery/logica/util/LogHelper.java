package com.sorcery.logica.util;

import com.sorcery.logica.Logica;
import com.sorcery.logica.config.LogicaConfig;
import org.slf4j.Logger;

/**
 * ÈõÜ‰∏≠ÁöÑÊó•ÂøóÁÆ°ÁêÜÂ∑•ÂÖ∑
 *
 * ÂäüËÉΩÔºö
 * - Êèê‰æõÈÖçÁΩÆÂåñÁöÑÊó•ÂøóËæìÂá∫ÊéßÂà∂
 * - ÈÅøÂÖçÂÖ≥Èó≠Êó∂ÁöÑÊÄßËÉΩÂºÄÈîÄ
 * - Áªü‰∏ÄÊó•ÂøóÊ†ºÂºèÂíåÁÆ°ÁêÜ
 *
 * ÊÄßËÉΩ‰ºòÂåñÔºö
 * - ÊâÄÊúâÊó•ÂøóÊñπÊ≥ïÂú®ÈÖçÁΩÆÂÖ≥Èó≠Êó∂‰ºöÁõ¥Êé•ËøîÂõûÔºåÈõ∂ÂºÄÈîÄ
 * - Â≠óÁ¨¶‰∏≤Ê†ºÂºèÂåñÂè™Âú®Êó•ÂøóÂêØÁî®Êó∂ÊâßË°å
 */
public class LogHelper {

    private static final Logger LOGGER = Logica.LOGGER;

    // ==================== GoalÁîüÂëΩÂë®ÊúüÊó•Âøó ====================

    /**
     * ËÆ∞ÂΩïGoalÂêØÂä®‰∫ã‰ª∂
     */
    public static void logGoalStart(String goalName, String mobName, Object... extraInfo) {
        if (!shouldLog(LogCategory.GOAL_LIFECYCLE)) return;
        LOGGER.info("üî• {}.start() CALLED for {} {}",
                goalName, mobName, formatExtra(extraInfo));
    }

    /**
     * ËÆ∞ÂΩïGoalÂÅúÊ≠¢‰∫ã‰ª∂
     */
    public static void logGoalStop(String goalName, String mobName, Object... extraInfo) {
        if (!shouldLog(LogCategory.GOAL_LIFECYCLE)) return;
        LOGGER.info("üî• {}.stop() CALLED for {} {}",
                goalName, mobName, formatExtra(extraInfo));
    }

    /**
     * ËÆ∞ÂΩïGoalÊù°‰ª∂Ê£ÄÊü•
     */
    public static void logGoalCanUse(String goalName, String mobName, boolean result, String reason) {
        if (!shouldLog(LogCategory.GOAL_LIFECYCLE)) return;
        LOGGER.debug("{}.canUse() for {} = {} ({})",
                goalName, mobName, result, reason);
    }

    // ==================== Áä∂ÊÄÅËΩ¨Êç¢Êó•Âøó ====================

    /**
     * ËÆ∞ÂΩïAIÁä∂ÊÄÅËΩ¨Êç¢
     */
    public static void logStateTransition(String mobName, String oldState, String newState, String strategy) {
        if (!shouldLog(LogCategory.STATE_TRANSITIONS)) return;
        LOGGER.debug("AICapability state changed: {} -> {} (strategy: {}) for {}",
                oldState, newState, strategy, mobName);
    }

    /**
     * ËÆ∞ÂΩïÁä∂ÊÄÅËΩ¨Êç¢Â§±Ë¥•
     */
    public static void logStateTransitionFailed(String mobName, String attemptedState, String reason) {
        if (!shouldLog(LogCategory.STATE_TRANSITIONS)) return;
        LOGGER.warn("State transition to {} failed for {}: {}",
                attemptedState, mobName, reason);
    }

    // ==================== ÂØºËà™Êó•Âøó ====================

    /**
     * ËÆ∞ÂΩïÂØºËà™ÊàêÂäü
     */
    public static void logNavigationSuccess(String mobName, String target, double speed) {
        if (!shouldLog(LogCategory.NAVIGATION)) return;
        LOGGER.info("üî• {} moveTo {} returned: true (speed: {})",
                mobName, target, speed);
    }

    /**
     * ËÆ∞ÂΩïÂØºËà™Â§±Ë¥•
     */
    public static void logNavigationFailed(String mobName, String target, String reason) {
        if (!shouldLog(LogCategory.NAVIGATION)) return;
        LOGGER.warn("üî• {} navigation to {} failed: {}",
                mobName, target, reason);
    }

    /**
     * ËÆ∞ÂΩïÂØºËà™ÈáçËØï
     */
    public static void logNavigationRetry(String mobName, int failedTicks, int maxTicks) {
        if (!shouldLog(LogCategory.NAVIGATION)) return;
        LOGGER.warn("üî• {} re-navigation failed! failedTicks: {}/{}",
                mobName, failedTicks, maxTicks);
    }

    // ==================== ÊÑüÁü•‰∫ã‰ª∂Êó•Âøó ====================

    /**
     * ËÆ∞ÂΩïËßÜËßâÂèëÁé∞‰∫ã‰ª∂
     */
    public static void logTargetSpotted(String mobName, String targetName, double distance) {
        if (!shouldLog(LogCategory.PERCEPTION_EVENTS)) return;
        LOGGER.debug("Mob {} spotted target {} at distance {}, switching to COMBAT state",
                mobName, targetName, distance);
    }

    /**
     * ËÆ∞ÂΩïÂê¨ËßâÊÑüÁü•‰∫ã‰ª∂
     */
    public static void logVibrationHeard(String mobName, String position, String investigationTarget) {
        if (!shouldLog(LogCategory.PERCEPTION_EVENTS)) return;
        LOGGER.info("Mob {} heard vibration at {}, switching to ALERT state, investigation target set to {}",
                mobName, position, investigationTarget);
    }

    /**
     * ËÆ∞ÂΩïË≠¶Êä•ÂπøÊí≠
     */
    public static void logAlertBroadcast(String mobName, int alerted) {
        if (!shouldLog(LogCategory.PERCEPTION_EVENTS)) return;
        LOGGER.debug("Sentries {} alerted {} nearby mobs",
                mobName, alerted);
    }

    // ==================== Ë∑ØÂæÑÁÇπÊêúÁ¥¢Êó•Âøó ====================

    /**
     * ËÆ∞ÂΩïË∑ØÂæÑÁÇπÊêúÁ¥¢ÂºÄÂßã
     */
    public static void logWaypointSearchStart(String strategy, int teamId) {
        if (!shouldLog(LogCategory.WAYPOINT_SEARCH)) return;
        LOGGER.info("Finding waypoints for {} strategy with team ID {}",
                strategy, teamId);
    }

    /**
     * ËÆ∞ÂΩïË∑ØÂæÑÁÇπÊêúÁ¥¢ÁªìÊûú
     */
    public static void logWaypointSearchResult(String strategy, int count, int radius) {
        if (!shouldLog(LogCategory.WAYPOINT_SEARCH)) return;
        if (radius > 0) {
            LOGGER.info("Found {} patrol waypoints within {} blocks radius", count, radius);
        } else {
            LOGGER.info("Found {} connected waypoints for {}", count, strategy);
        }
    }

    /**
     * ËÆ∞ÂΩïÂçï‰∏™Ë∑ØÂæÑÁÇπÂèëÁé∞
     */
    public static void logWaypointFound(String position, String adjustedFrom) {
        if (!shouldLog(LogCategory.WAYPOINT_SEARCH)) return;
        if (adjustedFrom != null) {
            LOGGER.debug("Found waypoint at {} (adjusted from {})", position, adjustedFrom);
        } else {
            LOGGER.debug("Found waypoint at {}", position);
        }
    }

    // ==================== Á≠ñÁï•Â∫îÁî®Êó•Âøó ====================

    /**
     * ËÆ∞ÂΩïÁ≠ñÁï•Â∫îÁî®
     */
    public static void logStrategyApplied(String strategy, int teamId, String mobName, String position) {
        if (!shouldLog(LogCategory.STRATEGY_APPLICATION)) return;
        LOGGER.info("Applied {} strategy (team {}) to {} at {}",
                strategy, teamId, mobName, position);
    }

    /**
     * ËÆ∞ÂΩïGoalÊ≥®ÂÜå
     */
    public static void logGoalRegistered(String goalName, String mobName) {
        if (!shouldLog(LogCategory.STRATEGY_APPLICATION)) return;
        LOGGER.debug("Registered {} for {}", goalName, mobName);
    }

    /**
     * ËÆ∞ÂΩïGoalÁßªÈô§
     */
    public static void logGoalRemoved(String goalName, int priority, String mobName) {
        if (!shouldLog(LogCategory.STRATEGY_APPLICATION)) return;
        LOGGER.info("Removed {} (Priority {}) from {}", goalName, priority, mobName);
    }

    /**
     * ËÆ∞ÂΩïÁ≠ñÁï•Ê†áËÆ∞Ê£ÄÊµã
     */
    public static void logMarkerDetection(String mobName, String position) {
        if (!shouldLog(LogCategory.STRATEGY_APPLICATION)) return;
        LOGGER.info("Detecting Mob spawn: {} at {}", mobName, position);
    }

    /**
     * ËÆ∞ÂΩïÊ†áËÆ∞Êâ´ÊèèËøáÁ®ã
     */
    public static void logMarkerScanning(String position) {
        if (!shouldLog(LogCategory.STRATEGY_APPLICATION)) return;
        LOGGER.debug("Scanning 3x3x3 area around {} for strategy markers...", position);
    }

    // ==================== ÈÄöÁî®Â∑•ÂÖ∑ÊñπÊ≥ï ====================

    /**
     * ËÆ∞ÂΩïË≠¶Âëä‰ø°ÊÅØÔºàÊÄªÊòØËæìÂá∫Ôºâ
     */
    public static void warn(String message, Object... args) {
        LOGGER.warn(message, args);
    }

    /**
     * ËÆ∞ÂΩïÈîôËØØ‰ø°ÊÅØÔºàÊÄªÊòØËæìÂá∫Ôºâ
     */
    public static void error(String message, Object... args) {
        LOGGER.error(message, args);
    }

    /**
     * ËÆ∞ÂΩïË∞ÉËØï‰ø°ÊÅØÔºàÂèóÊÄªÂºÄÂÖ≥ÊéßÂà∂Ôºâ
     */
    public static void debug(String message, Object... args) {
        if (!LogicaConfig.ENABLE_DEBUG_LOGS.get()) return;
        LOGGER.debug(message, args);
    }

    /**
     * ËÆ∞ÂΩï‰∏ÄËà¨‰ø°ÊÅØÔºàÊÄªÊòØËæìÂá∫Ôºâ
     */
    public static void info(String message, Object... args) {
        LOGGER.info(message, args);
    }

    // ==================== ÂÜÖÈÉ®ËæÖÂä©ÊñπÊ≥ï ====================

    /**
     * Âà§Êñ≠ÊòØÂê¶Â∫îËØ•ËæìÂá∫Êó•Âøó
     */
    private static boolean shouldLog(LogCategory category) {
        // ‰∏ªÂºÄÂÖ≥ÂÖ≥Èó≠ÔºåÁõ¥Êé•ËøîÂõûfalse
        if (!LogicaConfig.ENABLE_DEBUG_LOGS.get()) {
            return false;
        }

        // Ê£ÄÊü•ÂàÜÁ±ªÂºÄÂÖ≥
        return switch (category) {
            case GOAL_LIFECYCLE -> LogicaConfig.LOG_GOAL_LIFECYCLE.get();
            case STATE_TRANSITIONS -> LogicaConfig.LOG_STATE_TRANSITIONS.get();
            case NAVIGATION -> LogicaConfig.LOG_NAVIGATION.get();
            case PERCEPTION_EVENTS -> LogicaConfig.LOG_PERCEPTION_EVENTS.get();
            case WAYPOINT_SEARCH -> LogicaConfig.LOG_WAYPOINT_SEARCH.get();
            case STRATEGY_APPLICATION -> LogicaConfig.LOG_STRATEGY_APPLICATION.get();
        };
    }

    /**
     * Ê†ºÂºèÂåñÈ¢ùÂ§ñ‰ø°ÊÅØ
     */
    private static String formatExtra(Object... extraInfo) {
        if (extraInfo == null || extraInfo.length == 0) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        for (Object info : extraInfo) {
            sb.append(info).append(" ");
        }
        return sb.toString().trim();
    }

    // ==================== Êó•ÂøóÂàÜÁ±ªÊûö‰∏æ ====================

    private enum LogCategory {
        GOAL_LIFECYCLE,
        STATE_TRANSITIONS,
        NAVIGATION,
        PERCEPTION_EVENTS,
        WAYPOINT_SEARCH,
        STRATEGY_APPLICATION
    }
}
